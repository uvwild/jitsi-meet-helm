##########################################################################################
##########################################################################################
##########################################################################################
#  configure jitsi
##########################################################################################
namespace: jitsi
svcSuffix: svc.cluster.local

imagePullSecrets:
  - name: regcred
image:
#  tag: stable-5142-4   # previous
  tag: stable-5390-3

#webHost: www.jitsi.otcdemo.gardener.t-systems.net
#publicIp: 80.158.56.57
webHost: ng.jitsi.otcdemo.gardener.t-systems.net
#webHostAlt: jitsing.otcdemo.gardener.t-systems.net

####  this is used again in the nginx config
publicIp: 80.158.59.113
ingress:
  # nginx-ingress istio-ingress istio-gateway
  type: nginx-ingress
  annotations: |-
    sidecar.istio.io/inject: "true"

common:
  domain: jitsi.otc
  env:
    - name: ENABLE_XMPP_WEBSOCKET
      value: "0"
    - name: ENABLE_LETSENCRYPT
      value: "0"
    - name: ENABLE_AUTH
      value: "0"
    - name: LETSENCRYPT_DOMAIN
      value: ng.jitsi.otcdemo.gardener.t-systems.net
    - name: JVB_BREWERY_MUC
      value: jvbbrewery
    - name: TZ
      value: Europe/Amsterdam

jicofo:
  userAuth:
    enabled: false
    name: "focus"
    secret: dG90bw==
  componentSecret: dG90bw==
  env:
    - name: LOG_LEVEL
      value: info
    - name: JICOFO_ENABLE_BRIDGE_HEALTH_CHECKS
      value: "true"
    - name: JICOFO_ENABLE_HEALTH_CHECKS
      value: "false"
  image:
    repository: jitsi/jicofo
    pullPolicy: IfNotPresent

jvb:
  ingress:
    enabled: false
    annotations: |-
      sidecar.istio.io/inject: "true"
    # traffic.sidecar.istio.io/includeInboundPorts: ""
    # traffic.sidecar.istio.io/excludeInboundPorts: "80,443,10000,4443"
  userAuth:
    enabled: false
    name: "jvb"
    secret: dG90bw==
  service:
    type: ClusterIP       # NodePort   # nodeports  30000-32768
#    annotations: |-
#      sidecar.istio.io/inject: 'true'
  nodeport: 30000
  # used for nodeport calculation
  tcpoffset: 1000
  # default ports for video streams
  udpport: 10000
  tcpport: 4443
  env:
    - name: LOG_LEVEL
      value: info
    - name: JVB_OPTS
      value: "--apis=xmpp,rest"
    - name: ENABLE_STATISTICS
      value: "true"
    - name: JVB_TCP_HARVESTER_DISABLED
      value: "false"
      # use values from below!!!!!!!!!!!!!
    - name: JVB_STUN_SERVERS
      value: "jitsid.otcdemo.gardener.t-systems.net:38743"
    # value: stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302

  image:
    repository: jitsi/jvb
    pullPolicy: IfNotPresent

prosody:
  replicaCount: 1
  userAuth:
    enabled: false
    guest: 1
    type: internal
  service:
    type: ClusterIP
  env:
    - name: TURN_HOST
      value: jitsid.otcdemo.gardener.t-systems.net
    - name: TURN_PORT
      value: 38743
    - name: TURNS_PORT
      value: 39435
    - name: TURN_USER
      value: mycoturn
    - name: TURN_PASS
      value: m0recomplicatedPassword
    - name: LOG_LEVEL
      value: debug
    - name: ENABLE_GUESTS
      value: "1"
    - name: ENABLE_IPV6
      value: "true"
    - name: ENABLE_STATISTICS
      value: "true"
    - name: GLOBAL_MODULES
      value: smacks,turncredentials,websocket
    - name: GLOBAL_CONFIG
      value: turncredentials_secret='mySecretTurnPasswordConfiguredInTurnServer'
#    - name: TURN_AUTH_PASSWORD
#      value: mySecretTurnPasswordConfiguredInTurnServer
#      value: meet-jit-si-turnrelay.jitsi.net
#      value: stun.t-online.de
#  turnHost: turn.jitsi.otcdemo.gardener.t-systems.net
    # - name: TURN_PORT
    #   value: 3478
    # - name: TURN_TCP_PORT
    #   value: 3478
    # - name: TURN_UDP_PORT
    #   value: 3478
    # - name: TURN_TLS_PORT
    #   value: 5349


  image:
    repository: jitsi/prosody
    pullPolicy: IfNotPresent

turn:
  enabled: false
  replicaCount: 1
  xmppTurnDomain: turn.jitsi.otc
  # ports for turn forwarding
  minPort: 10000
  maxPort: 10100
  userAuth:
    enabled: true
    name: tina
    secret: eike
  service:
    type: ClusterIP
  image:
    # repository: flaviostutz/coturn
    # tag: 4.5.0.5
    repository: instrumentisto/coturn
    tag: 4.5.2
    pullPolicy: IfNotPresent

web:
  replicaCount: 1
  # the letsencrypt script is not working inside the nodes of our helm chart
  # we are using istio in gardener instead
  env:
    - name: ENABLE_GUESTS
      value: "1"
    - name: ENABLE_IPV6
      value: "true"
    - name: ENABLE_HTTP_REDIRECT
      value: "0"
    - name: LOG_LEVEL
      value: info
    # skip key generation on web deployment
    - name: DISABLE_HTTPS
      value: "0"
    - name: P2P_TEST_MODE
      value: "true"
    # this makes SSL complicated
    - name: ENABLE_HSTS
      value: "0"


  service:
    type: ClusterIP
    port: 80
    sslport: 443
    annotations: |-
      sidecar.istio.io/inject: 'true'
  image:
    repository: jitsi/web
    pullPolicy: IfNotPresent

##########################################################################################
##########################################################################################
##########################################################################################
#  configure nginx controller BEWARE OF CHANGING IPS
##########################################################################################
ingress-nginx:
  controller:
    image:
      tag: "v0.44.0"
      allowPrivilegeEscalation: true
    # Configures the ports the nginx-controller listens on
    containerPort:
      http: 80
      https: 443

      tcp: 4443
  #    udp: 10000
    # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/
    config:
      proxy-read-timeout: "3600"
      proxy-send-timeout: "3600"
#      error-log-level: "debug"
      server-tokens: "false"
      ssl-protocols:  TLSv1.2 TLSv1.3
      ssl_ciphers: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

      # ssl_buffer_size: 16k # default

    scope:
      enabled: true
      namespace: "jitsi"   # defaults to .Release.Namespace

    ## Allows customization of the configmap / nginx-configmap namespace
    configMapNamespace: "jitsi"   # defaults to .Release.Namespace

    ## Allows customization of the tcp-services-configmap
    tcp:
      configMapNamespace: "jitsi"   # defaults to .Release.Namespace

    ## Allows customization of the udp-services-configmap
    udp:
      configMapNamespace: "jitsi"   # defaults to .Release.Namespace

    service:
      # Must be either "None" or "ClientIP" if set. Kubernetes will default to "None".
      # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      # sessionAffinity: ""
      sessionAffinity: ClientIP

      externalIP: {}
  ## Default 404 backend
  defaultBackend:
    enabled: false

  ## Optional array of imagePullSecrets containing private registry credentials
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets:
    - name: regcred

  # TCP service key:value pairs
  # Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp
  ## This is complaining because JVB ony opens the ports after a session is setup
  tcp:
    4443: "jitsi/jitsi-otc-jvb-0:4443"

  #  8080: "default/example-tcp-svc:9000"

  # UDP service key:value pairs
  # Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp
  ##

  ############### we cannot provide udb AND tcp routes 
  udp: {}
  #  10000: "jitsi/jitsi-otc-jvb-0:10000"
  #  53: "kube-system/kube-dns:53"
  #  10000: "jitsi/jitsi-otc-jvb-0:10000"
  dhParam: "LS0tLS1CRUdJTiBESCBQQVJBTUVURVJTLS0tLS0KTUlJQ0NBS0NBZ0VBNjdsY3k3ZWlKUkY1M3Y4N2pqa0N4VnZXNHlxMCtGajJQem5PcDhVWVNwQWxFUWpFNFUrQQpaSVUrRE5wMUxGU0t0RzlBVVhiR1J0TVE2YUhqZE1scmRmb2lSUm5SNFg3R0Y1VWMvSm5sR2lqU0huZDFFQTNmCkNCck5TQUF2M3hNeWs4SGZ4TzZpQ3NMUGp3UnVPVmdUUnNKVmo5S2tsWWRGdDN6c1FjTHlzdDd4akJvMzJCYmEKVzVRTXVQUzkxaktud3hQNHRFak01bU11dDFiaFY0SEZhelpuNEtrcmhEV3VoRmRibkY5YUsxb2hwQW1tTXFKcApoRlByTXZUeDZscFFTYktXTXdkdW9QYy9WV2hqTm0rcU5WWTYrVnVrNzVrL0dPZ0plMmd3Rm42RUh4ZS9IK2M5CmJOVjBOUnBxeDJnQnE5M0dFTWxwbHFkNHEwU0dtTHU0NCtWNm9GcWoyM1pZL0syem9VQkVBV2J0MXl3dTVzM3EKVktRY1FXbUltOXA5YXlSMkRtVnVrY2FzbTJQTTZ5QWd4a0IvdlU0bVBQZjBPRmlvdGxKaVg1cDVvSmVtdW9YWQpwVHhTRmM4SGZiY0t5dzhiQmRkME9vS0E1VTJ1YTA1NGJqOG5vN3FOU1ltbGczODM4aFUrNVN3KysrYUZuMllNCnhwUERnSEVySmJjQ3BpOGdwRitJRThYcEhNc01BTkdOZlprYXJPUjNrZHJvTFRySUxQa0hKTE1tRk9RRHNEVG0KV2xKY1dvaTNucGFtMk5XYzhPWFR2Slk3bXpkeU5OSUxuU2RHWmxBeWJGNzZURVNQYU5RazJ0NTJCNVo2UTFMZgo0dkxMVEJpaE8zWkxJd3AwdklMWklISzlNYSsxMDlGd1RxeGF4QktTRGcwMHdjNys5NTFSRThNQ0FRST0KLS0tLS1FTkQgREggUEFSQU1FVEVSUy0tLS0tCg=="
